#!/usr/bin/env node

const util = require('util');
const exec = util.promisify(require('child_process').exec);
const installTemplateConfig = require('./package-install-template.config.json');
const package = require('../package.json');
const { FileLogger } = require('./logger');

/**
 * node bin/package-install-template
 */

const { userId, repoId } = installTemplateConfig;
const packageInitConfig = { ...installTemplateConfig };
const packageInitConfigJson = JSON.stringify(packageInitConfig, null, 2);
const templateRepoUrl = package.repository.url;
const binName = '[package-install]:';

const installFromTemplate = async () => {
  if (!userId || !repoId) {
    throw new Error('Repo config is not valid.');
  }

  const logger = new FileLogger();

  await exec(`git clone ${templateRepoUrl} ${repoId}`, { cwd: '../' });
  await exec(`echo '${packageInitConfigJson}' > bin/package-init.config.json`, {
    cwd: `../${repoId}`,
  });

  await logger.log(binName, 'initialize a remote git repo', 'done');

  await exec(`node bin/package-init`, { cwd: `../${repoId}` });
  await exec(`code .`, { cwd: `../${repoId}` });
};

installFromTemplate();
