#!/usr/bin/env node

const util = require('util');
const exec = util.promisify(require('child_process').exec);
const packageInstallConfig = require('./package-install.config.json');
const package = require('../package.json');
const { FileLogger } = require('./logger');

/**
 * node bin/package-install
 */

const { userId, repoId } = packageInstallConfig;
const packageBootstrapConfig = JSON.stringify({ ...packageInstallConfig }, null, 2);
const templateRepoUrl = package.repository.url;
const binName = '[package-install]:';

const logger = new FileLogger();

const execCommand = async (command, options) => {
  try {
    const { stdout, stderr } = await exec(command, options);
    if (stderr) {
      logger.error(stderr);
    }

    return stdout;
  } catch (error) {
    logger.error(error);
    process.exit(1);
  }
};

const main = async () => {
  try {
    await logger.clear();

    if (!userId || !repoId) {
      logger.error('Repo config is not valid.');
      process.exit(1);
    }

    await execCommand(`git clone ${templateRepoUrl} ${repoId}`, { cwd: '../' });
    await execCommand(`echo '${packageBootstrapConfig}' > bin/package-bootstrap.config.json`, {
      cwd: `../${repoId}`,
    });

    await logger.log(binName, `initialize a remote git repo ${repoId}`, 'done');

    await logger.log(binName, 'successfull');

    await execCommand(`node bin/package-bootstrap`, { cwd: `../${repoId}` });

    await execCommand(`code .`, { cwd: `../${repoId}` });
  } catch (error) {
    console.log(error);
    logger.error(error);
    process.exit(1);
  }
};

main()
  .then()
  .catch((error) => logger.error(error));
